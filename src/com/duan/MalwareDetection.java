package com.duan;

import com.duan.analysis.FunctionsAnalysis;
import com.duan.analysis.PermissionAnalysis;
import com.duan.common.ApkDetection;
import com.duan.common.ComPrint;
import com.duan.db.DBControl;
import com.duan.db.DBMalwareHelper;
import com.duan.decompile.Decompiler;
import com.duan.table_manager.FunctionsManager;
import com.duan.table_manager.PermissionManager;
import com.duan.table_manager.SamplesManager;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;

/**
 * Created by DuanJiaNing on 2017/4/27.
 */
public class MalwareDetection {

    Collection<?> permissions;
    Collection<?> functions;

    private final String T = DBMalwareHelper.MALWARE_TYPE_TROJAN_VIRUS_SW;
    private final String O = DBMalwareHelper.MALWARE_TYPE_OTHER_SW;
    private final String P = DBMalwareHelper.MALWARE_TYPE_PHISHING_SW;
    private final String S = DBMalwareHelper.MALWARE_TYPE_SEX_SW;
    private final String R = DBMalwareHelper.MALWARE_TYPE_RANSOMWARE_SW;


    @ApkDetection("开始检测apk是否为恶意APP")
    public void startDetection() {

        new SamplesManager().checkTest();

        Decompiler decompiler = new Decompiler(true, true);
        decompiler.setOnDecompileFinish(() -> {

            permissions = new PermissionAnalysis().analysisTest().getContainerSet();
            calculatePermisSimilar();

            functions = new FunctionsAnalysis().analysisTest().getContainerSet();
            calculateFunctionSimilar();

        });

        decompiler.decompileTestAPK();

    }

    //检测完成
    private void detectionFinish() {
        ComPrint.error(" apk 检测结束");
    }

    //输出检测结果
    private void reportPer(PermisSimilar... lps) {

        ComPrint.info("权限相似度计算完成");
        Arrays.stream(lps).forEach(lp -> ComPrint.error("ratio:" + lp.value));

    }

    private void reportFun(FunctionSimilar... lps) {

        ComPrint.info("方法调用相似度计算完成");
        Arrays.stream(lps).forEach(lp -> ComPrint.error("ratio:" + lp.value));

        detectionFinish();

    }

    //计算待测 apk 与样本的权限申请相似度
    private void calculatePermisSimilar() {
        PermissionManager manager = new PermissionManager();
        PermisSimilar psT = new PermisSimilar(T, getPermRatio(manager.getPermissions(T)));
        PermisSimilar psO = new PermisSimilar(O, getPermRatio(manager.getPermissions(O)));
        PermisSimilar psP = new PermisSimilar(P, getPermRatio(manager.getPermissions(P)));
        PermisSimilar psS = new PermisSimilar(S, getPermRatio(manager.getPermissions(S)));
        PermisSimilar psR = new PermisSimilar(R, getPermRatio(manager.getPermissions(R)));

        reportPer(psT, psO, psP, psS, psR);

    }


    //计算待测 apk 与样本的方法调用相似度
    private void calculateFunctionSimilar() {
        FunctionsManager manager = new FunctionsManager();
        FunctionSimilar fuT = new FunctionSimilar(T, getFunRatio(manager.getFunctions(T), T));
        FunctionSimilar fuO = new FunctionSimilar(O, getFunRatio(manager.getFunctions(O), O));
        FunctionSimilar fuP = new FunctionSimilar(P, getFunRatio(manager.getFunctions(P), P));
        FunctionSimilar fuS = new FunctionSimilar(S, getFunRatio(manager.getFunctions(S), S));
        FunctionSimilar fuR = new FunctionSimilar(R, getFunRatio(manager.getFunctions(R), R));

        reportFun(fuT, fuO, fuP, fuS, fuR);

    }

    private float getPermRatio(ArrayList<PermissionManager.Permission> list) {
        float co = 0;
        for (int i = 0; i < list.size(); i++) {
            PermissionManager.Permission p = list.get(i);
            Iterator<PermissionManager.Permission> iterator = (Iterator<PermissionManager.Permission>) permissions.iterator();
            while (iterator.hasNext()) {
                if (iterator.next().getName().equals(p.getName()))
                    co++;
            }
        }

        return co / permissions.size();
    }

    private float getFunRatio(ArrayList<FunctionsManager.Function> list, String t) {
        float co = 0;
        int sum = DBControl.countByType(t, DBMalwareHelper.TABLE_SAMPLES);
        for (int i = 0; i < list.size(); i++) {
            FunctionsManager.Function f = list.get(i);
            Iterator<FunctionsManager.Function> it = (Iterator<FunctionsManager.Function>) functions.iterator();
            while (it.hasNext()) {
                FunctionsManager.Function fc = it.next();
                if (fc.getClasS().equals(f.getClasS()) && fc.getSignature().equals(f.getSignature())) {
                    int in = (int) (fc.getRatio() - f.getRatio() * sum);
                    if (in > 5)
                        co += in / 5;
                    else
                        co += 1;
                }
            }
        }
        return co / functions.size();
    }

    private class PermisSimilar {
        String type;
        float value;

        public PermisSimilar(String type, float value) {
            this.type = type;
            this.value = value;
        }
    }

    private class FunctionSimilar {
        String type;
        float value;

        public FunctionSimilar(String type, float value) {
            this.type = type;
            this.value = value;
        }
    }

}
